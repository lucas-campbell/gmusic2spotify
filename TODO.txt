current state:
    add_tracks_to_lib not working becasue of a weird json response error. Not
    worth worrying about?
Next:
    1. attempt to build a list of track objects from playlist, make sure that has
        the same length as the storeIds list. 
    2. from a list of Track objects, create corresponding spotify playlist:
        a. for each track object, do custom search & for now just add to PL if
            there exists an exact match.
        b. Log success & failure (num tracks succeeded, name of tracks that
            didnt)

Future:
    1. Have multiple Track object constructor options: one for each music
    service API so can make a call like 
    'song = Track.Track(track_dict, service= gm)'
    plus a generic one where can fill in parameters manually, e.g.
    'song = Track.Track(title='Love is All', Artist="The Tallest Man on Earth,
            ms=123456, Album='etc etc....)
    for cleaner code. Also expands the Track object fields so that can create
    algo to compare search results and put importance on one parameter or
    another  (e.g. Artist+Title > album > milliseconds > genre, etc).

    2. For faster process, can catch exception 'gmusicapi.exceptions.InvalidDeviceId'
        in gmusic.login_to_gmusic_with_oauth and get the first device id returned
        from there (not that much faster bc have to store oauth creds for each account,
        but it store separate oauth creds and access them each individually could
        streamline the process).
    3. Just make a bash script that take args for playlists as cmd line args or
    lines of a file or smth and does all this instead of having to run a playlist
    transfer script once for each playlist
